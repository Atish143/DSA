Hello LinkedIn! üëã

üöÄ Day 12 of My #100DaysOfDSA Journey! üöÄ





Today, I took Binary Search to the next level by implementing it recursively! üî•





üìå What is Recursive Binary Search?

Just like Binary Search, Recursive Binary Search works by dividing the search space into half. However, instead of using a loop, it calls itself (recursively) until the target element is found.





üîπ Example:

Imagine searching for a word in a dictionary üìñ. Instead of manually flipping pages, you ask a friend to check the middle and delegate the search further. That‚Äôs recursion in action!









üõ†Ô∏è Recursive Binary Search in JavaScript



function recursiveBinarySearch(array, target) {

    return search(array, target, 0, array.length - 1);

}



function search(array, target, leftIndex, rightIndex) {

    if (leftIndex > rightIndex) {

        return -1;  // Target not found

    }



    let middleIndex = Math.floor((leftIndex + rightIndex) / 2);



    if (target === array[middleIndex]) {

        return middleIndex;  // Target found

    }



    if (target < array[middleIndex]) {

        return search(array, target, leftIndex, middleIndex - 1);  // Search in left half

    } else {

        return search(array, target, middleIndex + 1, rightIndex);  // Search in right half

    }

}

console.log(recursiveBinarySearch([-2, 20, 30, 40, 50, 60, 80], 50)); // Output: 4







üßê How Does This Work? (Step-by-Step Example)

 For array = [-2, 20, 30, 40, 50, 60, 80] and target = 50:

 1Ô∏è‚É£ Find the middle ‚Üí (0 + 6) / 2 = 3 ‚Üí array[3] = 40 (not 50)

 2Ô∏è‚É£ Since 50 > 40, recursively search right half (index 4 to 6)

 3Ô∏è‚É£ New middle ‚Üí (4 + 6) / 2 = 5 ‚Üí array[5] = 60 (not 50)

 4Ô∏è‚É£ Since 50 < 60, recursively search left half (index 4)

 5Ô∏è‚É£ array[4] = 50 ‚úÖ Found! Returns index 4





‚è≥ Understanding Time Complexity

üîπ Worst Case: O(log n) ‚Äì The search space halves each time.

üîπ Best Case: O(1) ‚Äì If the middle element is the target.

üí° Recursion makes the code more elegant but uses additional stack space.







üí° Key Takeaways

‚úî Binary Search can be implemented iteratively or recursively.

‚úî Recursion makes code more readable but may use extra memory.

‚úî Same O(log n) complexity as Iterative Binary Search.

Recursion is a fundamental concept in problem-solving! Let me know if you 





prefer the iterative or recursive approach. üöÄ





#100DaysOfDSA #BinarySearch #Recursion #JavaScript #Coding #Tech #DataStructures