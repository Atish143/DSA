// üîç What I Learned:
// Today, I implemented the search operation in a Binary Search Tree using JavaScript!

// üß† How it works:

// The search() method checks if a value exists in the BST.

// If the value is equal to the current node, it returns true.

// If the value is smaller, it searches the left subtree.

// If the value is larger, it searches the right subtree.

// If the node is null, the value doesn't exist in the tree.

// üíª Code:
// javascript
// Copy
// Edit
// class Node {
//     constructor(value) {
//         this.value = value;
//         this.left = null;
//         this.right = null;
//     }
// }

// class BinarySearchTree {
//     constructor(){
//         this.root = null;
//     }

//     isEmpty(){
//         return this.root === null;
//     }

//     insert(value){
//         const newNode = new Node(value);
//         if (this.isEmpty()) {
//             this.root = newNode;
//         } else {
//             this.insertNode(this.root, newNode);
//         }
//     }

//     insertNode(root, newNode){
//         if (newNode.value < root.value) {
//             if (root.left === null) {
//                 root.left = newNode;
//             } else {
//                 this.insertNode(root.left, newNode);
//             }
//         } else {
//             if (root.right === null) {
//                 root.right = newNode;
//             } else {
//                 this.insertNode(root.right, newNode);
//             }
//         }
//     }

//     search(root, value){
//         if (!root) {
//             return false;
//         } else {
//             if (root.value === value) {
//                 return true;
//             } else if (value < root.value) {
//                 return this.search(root.left, value);
//             } else {
//                 return this.search(root.right, value);
//             }
//         }
//     }
// }

// const bst = new BinarySearchTree();
// console.log("Tree is empty:", bst.isEmpty());
// bst.insert(10);
// bst.insert(5);
// bst.insert(15);

// console.log(bst.search(bst.root, 115)); // false
// ‚è± Time Complexity:
// Best/Average Case (Balanced Tree): O(log n)

// Worst Case (Skewed Tree): O(n)

// üåü Next up, I'll explore BST traversals and more operations like deletion!
// Consistency is üîë to mastering DSA! üöÄ

// #100DaysOfCode #DSA #JavaScript #BinarySearchTree #CodeNewbie #LearningInPublic #WebDevelopment #DeveloperJourne