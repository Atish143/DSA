// 📚 Hello LinkedIn!
// 🗓 Day 38 of #100DaysOfDSA — Continuing my learning journey with Binary Search Trees (BSTs) 🌳

// 🔥 What I Learned Today:
// Today I explored tree traversals in BSTs — specifically:

// PreOrder Traversal: Visit root ➡️ left subtree ➡️ right subtree.

// InOrder Traversal: Visit left subtree ➡️ root ➡️ right subtree.

// PostOrder Traversal: Visit left subtree ➡️ right subtree ➡️ root.

// Each method gives a different sequence of values depending on the tree structure!

// 💻 Here's the Code I Wrote:
// javascript
// Copy
// Edit
// class Node {
//     constructor(value) {
//         this.value = value;
//         this.left = null;
//         this.right = null;
//     }
// }

// class BinarySearchTree {
//     constructor(){
//         this.root = null;
//     }

//     isEmpty(){
//         return this.root === null;
//     }

//     insert(value){
//         const newNode = new Node(value);
//         if(this.isEmpty()) {
//             this.root = newNode;
//         } else {
//             this.insertNode(this.root, newNode);
//         }
//     }
    
//     insertNode(root, newNode){
//         if(newNode.value < root.value){
//             if(root.left === null){
//                 root.left = newNode;
//             } else {
//                 this.insertNode(root.left, newNode);
//             }
//         } else {
//             if(root.right === null){
//                 root.right = newNode;
//             } else {
//                 this.insertNode(root.right, newNode);
//             }
//         }
//     }

//     search(root, value){
//         if(!root) return false;
//         if(root.value === value) return true;
//         else if(value < root.value) return this.search(root.left, value);
//         else return this.search(root.right, value);
//     }

//     preOrder(root){
//         if(root){
//             console.log(root.value);
//             this.preOrder(root.left);
//             this.preOrder(root.right);
//         }
//     }

//     inOrder(root){
//         if(root){
//             this.inOrder(root.left);
//             console.log(root.value);
//             this.inOrder(root.right);
//         }
//     }

//     postOrder(root){
//         if(root){
//             this.postOrder(root.left);
//             this.postOrder(root.right);
//             console.log(root.value);
//         }
//     }
// }

// const bst = new BinarySearchTree();
// console.log("Tree is empty:", bst.isEmpty());
// bst.insert(10);
// bst.insert(5);
// bst.insert(15);
// bst.insert(3);
// bst.insert(7);

// console.log(bst.search(bst.root, 15));
// bst.inOrder(bst.root);
// ⏱ Time Complexity for Traversals:
// PreOrder, InOrder, PostOrder Traversals:
// 🔥 O(n) — we visit each node exactly once!

// 🌟 Takeaway:
// Understanding these traversal techniques is important because they form the foundation for many tree-based algorithms!

// Next, I’ll dive deeper into deleting nodes in BSTs and balancing trees!

// #100DaysOfCode #DSA #JavaScript #BinarySearchTree #WebDevelopment #DeveloperJourney #LearningInPublic

// Would you also like me to prepare a version with some cool emojis inside the code (🌲➡️🌳) to make it look even more fun for LinkedIn? 🚀🌟