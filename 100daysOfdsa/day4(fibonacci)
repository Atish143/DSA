Hello LinkedIn! 👋



🚀 Day 4 of My #100DaysOfDSA Journey! 🚀



Today, I explored the Fibonacci Sequence in JavaScript. Let’s break it down in the simplest way possible.





🤔 What is the Fibonacci Sequence?



The Fibonacci Sequence is a series of numbers where:

Each number is the sum of the previous two numbers.

It starts with 0 and 1 by default.



📌 Example:

 0, 1, 1, 2, 3, 5, 8, 13, 21, 34…

💡 Rule:

fib(0) = 0

fib(1) = 1

fib(n) = fib(n-1) + fib(n-2) (for n ≥ 2)







🛠️ How Do We Generate Fibonacci in Code?

Let’s write a simple function in JavaScript:

function Fibonacci(n) {

    let fib = [0, 1]; // Starting sequence

    for (let i = 2; i < n; i++) {  // Loop to generate numbers

        fib[i] = fib[i - 1] + fib[i - 2]; // Sum of last two numbers

    }

    

    if (n === 0 || n === 1) { 

        return n;  // Special cases for 0 and 1

    } else if (n < 0) { 

        return "error"; // Negative numbers don’t work!

    }

    return fib; // Return the sequence

}

console.log(Fibonacci(10)); 

// Output: [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]





⏳ Understanding Time Complexity

🔵 The loop runs (n-2) times, meaning:

If n = 10, the loop runs 8 times

If n = 1000, the loop runs 998 times

Since we iterate linearly from 2 to n, the Time Complexity = O(n) (Linear Time Complexity).





💡 Simple Takeaways

✔ Fibonacci appears in nature! 🌿 (Spiral patterns in sunflowers, shells, and galaxies!)

✔ It’s widely used in algorithms, stock markets, and even music.

✔ O(n) means the more elements we generate, the longer it takes linearly.



Hope this makes sense! Let’s keep learning. 🚀



#100DaysOfDSA #BigO #JavaScript #Fibonacci #TimeComplexity #Coding #Learning #Tech