// 💡 Day 49 of hashtag#100DaysOfDSA
// Today I tackled “Maximal Square” — a classic dynamic programming problem that’s all about identifying the largest square of 1s in a binary matrix!


// 🧩 Problem Statement:
// Given a binary matrix filled with 0s and 1s, find the area of the largest square containing only 1s.


// 📌 Input Example:
// [
//  ["1","0","1","0","0"],
//  ["1","0","1","1","1"],
//  ["1","1","1","1","1"],
//  ["1","0","0","1","0"]
// ]
// 🔁 Output: 4 (as the largest square has side length 2, so area = 2²)


// ⚙️ JavaScript Solution:
// var maximalSquare = function(matrix) {
//  if (matrix.length === 0 || matrix[0].length === 0) return 0;

//  const m = matrix.length;
//  const n = matrix[0].length;
//  const dp = Array.from({ length: m }, () => Array(n).fill(0));
//  let maxSide = 0;

//  for (let i = 0; i < m; i++) {
//  for (let j = 0; j < n; j++) {
//  if (matrix[i][j] === '1') {
//  if (i === 0 || j === 0) {
//  dp[i][j] = 1;
//  } else {
//  dp[i][j] = Math.min(
//  dp[i - 1][j],
//  dp[i][j - 1],
//  dp[i - 1][j - 1]
//  ) + 1;
//  }
//  maxSide = Math.max(maxSide, dp[i][j]);
//  }
//  }
//  }

//  return maxSide * maxSide;
// };


// 🧠 Key Takeaways:
// Use Dynamic Programming (DP) to build a solution based on subproblems.
// For each cell that is 1, check top, left, and top-left neighbors to determine the square it can form.
// Efficient solution with O(m × n) time and space complexity.


// Dynamic programming really shines in 2D matrix problems like this — solving a big problem by building on smaller ones.


// What’s your favorite DP problem so far?


// hashtag#100DaysOfCode hashtag#LeetCode hashtag#JavaScript hashtag#DSA hashtag#DynamicProgramming hashtag#TechCareer hashtag#FrontendDeveloper hashtag#CodeNewbie hashtag#ProblemSolving hashtag#LinkedInCoding hashtag#MaximalSquare